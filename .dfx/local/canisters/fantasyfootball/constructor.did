type GetProps = record {
  status : text;
  page : nat;
  search : text;
  limit : nat;
};
type IUser = record { name : text; email : text };
type Key = text;
type Key__1 = text;
type MatchStatus = text;
type MonkeyId = text;
type Player = record {
  active : bool;
  country : text;
  name : text;
  fantasyPrice : nat;
  isPlaying : bool;
  number : nat;
  isSub : bool;
  photo : text;
  teamId : Key;
  position : Position;
  providerId : MonkeyId;
  points : opt RPoints;
};
type PlayerCount = record { d : int; f : int; g : int; m : int };
type Player__1 = record {
  active : bool;
  country : text;
  name : text;
  fantasyPrice : nat;
  isPlaying : bool;
  number : nat;
  isSub : bool;
  photo : text;
  teamId : Key;
  position : Position;
  providerId : MonkeyId;
  points : opt RPoints;
};
type Players = vec record { Key; Player };
type Position = variant { goalKeeper; midfielder; forward; defender };
type Position__1 = variant { goalKeeper; midfielder; forward; defender };
type RPoints = int;
type RTournamentMatch = record {
  id : Key;
  status : MatchStatus;
  tournamentName : text;
  homeTeam : Key;
  time : int;
  seasonId : Key;
  homeScore : nat;
  awayTeam : Key;
  awayScore : nat;
  tournamentId : Key;
  providerId : MonkeyId;
  location : text;
};
type RTournamentMatches = vec RTournamentMatch;
type RefinedMatch = record {
  status : MatchStatus;
  homeTeam : record { Key; opt Team__1 };
  time : int;
  seasonId : Key;
  homeScore : nat;
  awayTeam : record { Key; opt Team__1 };
  awayScore : nat;
  providerId : MonkeyId;
  location : text;
};
type Result = variant { ok : record { text; opt User }; err : text };
type Result_1 = variant { ok : record { Players; PlayerCount }; err : text };
type Result_2 = variant { ok : Players; err : text };
type ReturnMatches = record { total : nat; matches : RTournamentMatches };
type ReturnTournaments = record { total : nat; tournaments : Tournaments };
type Role = variant { admin; user };
type Team = record {
  logo : text;
  name : text;
  seasonId : Key;
  shortName : text;
  providerId : MonkeyId;
};
type Team__1 = record {
  logo : text;
  name : text;
  seasonId : Key;
  shortName : text;
  providerId : MonkeyId;
};
type Tournament = record {
  country : text;
  endDate : int;
  name : text;
  description : text;
  providerId : MonkeyId;
  startDate : int;
};
type Tournaments = vec record { Key; Tournament };
type User = record {
  name : text;
  role : Role;
  joiningDate : int;
  email : text;
};
type User__1 = record {
  name : text;
  role : Role;
  joiningDate : int;
  email : text;
};
type Users = vec record { Key; User__1 };
type _anon_class_19_1 = service {
  addPlayer : (Player__1) -> () oneway;
  addUser : (IUser) -> (Result);
  getAdmins : () -> (Users) query;
  getBudget : () -> (opt text) query;
  getMatch : (Key__1) -> (opt RefinedMatch) query;
  getMatchesWithTournamentId : (GetProps, opt int, opt Key__1) -> (
      ReturnMatches,
    ) query;
  getPlayer : (Key__1) -> (opt Player__1) query;
  getPlayersByPosition : (Position__1) -> (Result_2) query;
  getPlayersByTeamId : (Key__1) -> (Result_1) query;
  getPlayersByTeamIds : (vec Key__1) -> (Result_1) query;
  getTeamById : (Key__1) -> (opt Team) query;
  getTournamentsN : (GetProps) -> (ReturnTournaments) query;
  getUser : (opt text) -> (opt User) query;
  makeAdmin : (principal) -> (bool);
  savePlayers_mg : (Players) -> (bool);
  updateUser : (IUser) -> (Result);
};
service : () -> _anon_class_19_1