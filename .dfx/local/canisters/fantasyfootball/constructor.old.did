type Users = 
 vec record {
       Key;
       User__1;
     };
type User__1 = 
 record {
   email: text;
   joiningDate: int;
   name: text;
   role: Role;
 };
type User = 
 record {
   email: text;
   joiningDate: int;
   name: text;
   role: Role;
 };
type Tournaments = 
 vec record {
       Key;
       Tournament;
     };
type Tournament = 
 record {
   country: text;
   description: text;
   endDate: int;
   name: text;
   providerId: MonkeyId;
   startDate: int;
 };
type Team__1 = 
 record {
   logo: text;
   name: text;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type Team = 
 record {
   logo: text;
   name: text;
   providerId: MonkeyId;
   seasonId: Key;
   shortName: text;
 };
type Role = 
 variant {
   admin;
   user;
 };
type ReturnTournaments = 
 record {
   total: nat;
   tournaments: Tournaments;
 };
type ReturnMatches = 
 record {
   matches: RTournamentMatches;
   total: nat;
 };
type Result_2 = 
 variant {
   err: text;
   ok: Players;
 };
type Result_1 = 
 variant {
   err: text;
   ok: record {
         Players;
         PlayerCount;
       };
 };
type Result = 
 variant {
   err: text;
   ok: record {
         text;
         opt User;
       };
 };
type RefinedMatch = 
 record {
   awayScore: nat;
   awayTeam: record {
               Key;
               opt Team__1;
             };
   homeScore: nat;
   homeTeam: record {
               Key;
               opt Team__1;
             };
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
 };
type RTournamentMatches = vec RTournamentMatch;
type RTournamentMatch = 
 record {
   awayScore: nat;
   awayTeam: Key;
   homeScore: nat;
   homeTeam: Key;
   id: Key;
   location: text;
   providerId: MonkeyId;
   seasonId: Key;
   status: MatchStatus;
   time: int;
   tournamentId: Key;
   tournamentName: text;
 };
type RPoints = int;
type Position__1 = 
 variant {
   defender;
   forward;
   goalKeeper;
   midfielder;
 };
type Position = 
 variant {
   defender;
   forward;
   goalKeeper;
   midfielder;
 };
type Players = 
 vec record {
       Key;
       Player;
     };
type Player__1 = 
 record {
   active: bool;
   country: text;
   fantasyPrice: nat;
   isPlaying: bool;
   isSub: bool;
   name: text;
   number: nat;
   photo: text;
   points: opt RPoints;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type PlayerCount = 
 record {
   d: int;
   f: int;
   g: int;
   m: int;
 };
type Player = 
 record {
   active: bool;
   country: text;
   fantasyPrice: nat;
   isPlaying: bool;
   isSub: bool;
   name: text;
   number: nat;
   photo: text;
   points: opt RPoints;
   position: Position;
   providerId: MonkeyId;
   teamId: Key;
 };
type MonkeyId = text;
type MatchStatus = text;
type Key__1 = text;
type Key = text;
type IUser = 
 record {
   email: text;
   name: text;
 };
type GetProps = 
 record {
   limit: nat;
   page: nat;
   search: text;
   status: text;
 };
service : {
  addPlayer: (Player__1) -> () oneway;
  addUser: (IUser) -> (Result);
  getAdmins: () -> (Users) query;
  getBudget: () -> (opt text) query;
  getMatch: (Key__1) -> (opt RefinedMatch) query;
  getMatchesWithTournamentId: (GetProps, opt int, opt Key__1) ->
   (ReturnMatches) query;
  getPlayer: (Key__1) -> (opt Player__1) query;
  getPlayersByPosition: (Position__1) -> (Result_2) query;
  getPlayersByTeamId: (Key__1) -> (Result_1) query;
  getPlayersByTeamIds: (vec Key__1) -> (Result_1) query;
  getTeamById: (Key__1) -> (opt Team) query;
  getTournamentsN: (GetProps) -> (ReturnTournaments) query;
  getUser: (opt text) -> (opt User) query;
  makeAdmin: (principal) -> (bool);
  updateUser: (IUser) -> (Result);
}
